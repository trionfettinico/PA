/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package it.unicam.cs.pa.jlife105381;

import it.unicam.cs.pa.jlife105381.Controller.Data.DataJson;
import it.unicam.cs.pa.jlife105381.Controller.Data.DataSerialize;
import it.unicam.cs.pa.jlife105381.Controller.GameOfLifeController;
import it.unicam.cs.pa.jlife105381.View.Console.ConsoleView;
import it.unicam.cs.pa.jlife105381.View.InterfaceView;
import it.unicam.cs.pa.jlife105381.View.JavaFx.JavaFxView;

import java.util.Objects;

/**
 * JLife105381
 * classe principale che ha il compito di far partire il programma
 * utilizzando il tipo di interfaccia grafica scelto e il tipo di memorizzazione dei dati
 * @autor trionfetti nico
 * @param <T> tipo di interfaccia grafica scelto
 */
public class App<T extends InterfaceView> {

    private final T view;
    private static Log log;

    /**
     *lista dei nomi dei vari tipi di programma che si puo far partire
     */
    private enum GameOfLife_TYPE {
        BASICCONSOLESERIALIZE, BASICCONSOLEJSON, BASICJAVAFXSERIALIZE, BASICJAVAFXJSON
    }


    public App(T view) {
        this.view = view;
    }

    /**
     * metodo principale per far partire il programma e per chiuderlo
     */
    private void start() {
        view.start();
        view.stop();
    }

    /**
     * controllo se viene specificato il programma da far partire
     * controllando il parametro args, altrimenti faccio partire il programma base
     * @param args tipo di programma passato
     */
    public static void main(String[] args) {
        if (args.length == 0) {
            createGameOfLifeSerializeConsoleView().start();
        } else {
            try {
                Objects.requireNonNull(createGameOfLife(args[0])).start();
            } catch (IllegalArgumentException e) {
                log.logger.severe(e.getMessage());
                System.err.println("Game Of Life :  " + args[0] + " is unknown!");
            }
        }
    }

    /**
     * per la realizzazione dell'interfaccia da utilizzare
     * @param code interfaccia da utilizzare
     * @return
     */
    private static App<?> createGameOfLife(String code) {
        switch (GameOfLife_TYPE.valueOf(code.toUpperCase())) {
            case BASICCONSOLESERIALIZE:
                return createGameOfLifeSerializeConsoleView();
            case BASICCONSOLEJSON:
                return createGameOfLifeJsonConsoleView();
            case BASICJAVAFXSERIALIZE:
                return createGameOfLifeSerializeJavaFx();
            case BASICJAVAFXJSON:
                return createGameOfLifeJsonJavaFx();
        }
        return null;
    }

    /**
     * realizzazione di una interfaccia basata su una console che utilizza la serializazione
     * per memorizzare i dati
     * @return
     */
    private static App<?> createGameOfLifeSerializeConsoleView() {
        String path = "GameOfLifeSerialize.txt";
        log = new Log();
        DataSerialize data = new DataSerialize(log, path);
        GameOfLifeController manager = new GameOfLifeController(data);
        return new App<>(new ConsoleView(log, manager));
    }

    /**
     * realizzazione di una interfaccia basata su una console che utilizza json
     * per memorizzare i dati
     * @return
     */
    private static App<?> createGameOfLifeJsonConsoleView() {
        String path = "GameOfLifeJson.json";
        log = new Log();
        DataJson data = new DataJson(log, path);
        GameOfLifeController manager = new GameOfLifeController(data);
        return new App<>(new ConsoleView(log, manager));
    }

    /**
     * realizzazione di una interfaccia basata su GUI che utilizza la serializazione
     * per memorizzare i dati
     * @return
     */
    private static App<?> createGameOfLifeSerializeJavaFx() {
        String path = "GameOfLifeSerialize.txt";
        log = new Log();
        DataSerialize data = new DataSerialize(log, path);
        GameOfLifeController manager = new GameOfLifeController(data);
        return new App<>(new JavaFxView(log, manager));
    }

    /**
     * realizzazione di una interfaccia basata su GUI che utilizza json
     * per memorizzare i dati
     * @return
     */
    private static App<?> createGameOfLifeJsonJavaFx() {
        String path = "GameOfLifeJson.json";
        log = new Log();
        DataJson data = new DataJson(log, path);
        GameOfLifeController manager = new GameOfLifeController(data);
        return new App<>(new JavaFxView(log, manager));
    }

}
